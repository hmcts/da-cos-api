#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.MetricsPublisher

def type = "java"
def product = "da"
def component = "cos-api"

GradleBuilder builder = new GradleBuilder(this, product)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
                secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
                secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
        ],
        'ccd-${env}'      : [
                secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
                secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
                secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
                secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
        ],
        'da-${env}'    :[
                secret('ccd-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
                secret('ccd-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
                secret('idam-client-secret', 'OAUTH2_CLIENT_SECRET'),
                secret('idam-systemupdate-username', 'IDAM_SYSTEM_UPDATE_USERNAME'),
                secret('idam-systemupdate-password', 'IDAM_SYSTEM_UPDATE_PASSWORD')
        ]
]

def pipelineConf = new AppPipelineConfig()
pipelineConf.vaultSecrets = secrets

withPipeline(type, product, component) {
  enableAksStagingDeployment()
  disableLegacyDeployment()
  loadVaultSecrets(secrets)
  syncBranchesWithMaster(['demo', 'perftest', 'ithc'])
  enableSlackNotifications('#da-tech-notifications')

  MetricsPublisher metricsPublisher = new MetricsPublisher(this, currentBuild, product, component, params.subscription )
  approvedEnvironmentRepository(params.environment, metricsPublisher) {
    enableHighLevelDataSetup()
  }



    after('test') {
      builder.gradle('integration')
      builder.gradle('jacocoTestReport')

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "main.html",
        reportName           : "Checkstyle Main Report"
      ]

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "test.html",
        reportName           : "Checkstyle Test Report"
      ]

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "functionalTest.html",
        reportName           : "Checkstyle Functional Test Report"
      ]

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "integrationTest.html",
        reportName           : "Checkstyle Integration Test Report"
      ]

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/test",
        reportFiles          : "index.html",
        reportName           : "Unit Tests Report"
      ]
    }

    after('functionalTest') {
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/functional",
        reportFiles          : "index.html",
        reportName           : "Functional Tests Report"
      ]
    }

    after('smoketest:preview') {
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/smoke",
        reportFiles          : "index.html",
        reportName           : "Smoke Test Report"
      ]
    }

    after('smoketest:aat') {
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/smoke",
        reportFiles          : "index.html",
        reportName           : "Smoke Test Report"
      ]
    }

    after('checkout') {
      builder.gradle('generateCCDConfig')
      generateDefinitions()
    }

    onPR {
      env.ENVIRONMENT="preview"
      env.CASE_API_URL = "http://da-cos-api-pr-${CHANGE_ID}.service.core-compute-preview.internal"
      env.CCD_DEF_NAME = "preview"
      env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-da-cos-api-pr-${CHANGE_ID}.service.core-compute-preview.internal"
      env.CASE_DATA_STORE_BASEURL = "http://ccd-data-store-api-da-cos-api-pr-${CHANGE_ID}.service.core-compute-preview.internal"
      env.TEST_S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"

      setCommonEnvVariables()
    }

    onMaster {
        env.ENVIRONMENT="aat"
        env.CASE_API_URL="http://da-cos-api-aat.service.core-compute-aat.internal"
        env.CCD_DEF_NAME="aat"
        env.DEFINITION_STORE_URL_BASE="http://ccd-definition-store-api-aat.service.core-compute-aat.internal"

        setCommonEnvVariables()
    }

    before('functionalTest:preview') {
      // Only for preview upload the definitions via script as high level data set up relies on an existing environment
      uploadCoreCaseDataDefinitions()
    }
  }

  def setCommonEnvVariables() {
      env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
      env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
      env.FEE_API_URL = "http://fees-register-api-aat.service.core-compute-aat.internal"
      env.CCD_API_GATEWAY_OAUTH2_CLIENT_ID = "ccd_gateway"
      env.BEFTA_S2S_CLIENT_ID = "ccd_data"
      env.CCD_API_GATEWAY_OAUTH2_REDIRECT_URL = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
  }

  def uploadCoreCaseDataDefinitions() {
      dir("${WORKSPACE}/bin"){
          sh "./add-roles.sh"
          sh "./process-and-import-ccd-definition.sh"
      }
      dir("${WORKSPACE}") {
          steps.archiveArtifacts artifacts: "build/ccd-config/*.xlsx"
      }
  }

  def generateDefinitions() {
    dir("${WORKSPACE}/bin") {
      sh "./ccd-build-definition.sh"
    }
    dir("${WORKSPACE}") {
      steps.archiveArtifacts artifacts: "build/ccd-config/*.xlsx"
    }
  }

  after('checkout') {
    echo 'da-cos-api checked out'
  }

  after('test') {
    steps.junit '**/test-results/**/*.xml'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }

  before('functionalTest:aat') {
    env.test_environment = 'aat'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }

  // Kubernetes does not retrieve variables from the output terraform
  before('functionalTest:preview') {
    env.test_environment = 'aat'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }
}
